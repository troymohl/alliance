/**
 * Copyright (c) Codice Foundation
 * <p>
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 * <p>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 */
package org.codice.alliance.nsili.common;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import ddf.catalog.data.Metacard;

public class NsiliAttributeMap {
    private static Map<String, String> nsiliToDdfMap = new HashMap<>();
    private static Map<String, List<String>> ddfToNsiliMap = new HashMap<>();

    static {
        //Build up attribute mappings

        nsiliToDdfMap.put("NSIL_APPROVAL.approvedBy", "approvedBy");
        nsiliToDdfMap.put("NSIL_APPROVAL.dateTimeModified", "approvedDateTimeModified");
        nsiliToDdfMap.put("NSIL_APPROVAL.status", "approvalStatus");
        nsiliToDdfMap.put("NSIL_CARD.identifier", Metacard.ID);
        nsiliToDdfMap.put("NSIL_CARD.publisher", "publisher");
        nsiliToDdfMap.put("NSIL_CARD.sourceLibrary", "sourceLibrary");
        nsiliToDdfMap.put("NSIL_CARD.sourceDateTimeModified", Metacard.CREATED);
        nsiliToDdfMap.put("NSIL_CARD.sourceDateTimeModified", Metacard.EFFECTIVE);
        nsiliToDdfMap.put("NSIL_CARD.dateTimeModified", Metacard.MODIFIED);
        nsiliToDdfMap.put("NSIL_COMMON.identifierMission", "identifierMission");
        nsiliToDdfMap.put("NSIL_COMMON.identifierUUID", Metacard.ID);
        nsiliToDdfMap.put("NSIL_COMMON.identifierJC3IEDM", "identiferJC3Idm");
        nsiliToDdfMap.put("NSIL_COMMON.language", "language");
        nsiliToDdfMap.put("NSIL_COMMON.source", "NSILISource");
        nsiliToDdfMap.put("NSIL_COMMON.subjectCategoryTarget", "subjectCategoryTarget");
        nsiliToDdfMap.put("NSIL_COMMON.targetNumber", "targetNumber");
        nsiliToDdfMap.put("NSIL_COMMON.type", "productType");
        nsiliToDdfMap.put("NSIL_CXP.status", "status");
        nsiliToDdfMap.put("NSIL_COVERAGE.spatialCountryCode", "countryCode");
        nsiliToDdfMap.put("NSIL_COVERAGE.spatialGeographicReferenceBox", Metacard.GEOGRAPHY);
        nsiliToDdfMap.put("NSIL_COVERAGE.temporalStart", "startDateTime");
        nsiliToDdfMap.put("NSIL_COVERAGE.temporalEnd", "endDateTime");
        nsiliToDdfMap.put("NSIL_EXPLOITATION_INFO.description", "exploitationDescription");
        nsiliToDdfMap.put("NSIL_EXPLOITATION_INFO.level", "exploitationLevel");
        nsiliToDdfMap.put("NSIL_EXPLOITATION_INFO.autoGenerated", "exploitationAutoGenerated");
        nsiliToDdfMap.put("NSIL_EXPLOITATION_INFO.subjectiveQualityCode", "exploitationSubjectiveQualityCode");
        nsiliToDdfMap.put("NSIL_FILE.archived", "fileArchived");
        nsiliToDdfMap.put("NSIL_FILE.archiveInformation", "fileArchivedInfo");
        nsiliToDdfMap.put("NSIL_FILE.creator", Metacard.POINT_OF_CONTACT);
        nsiliToDdfMap.put("NSIL_FILE.dateTimeDeclared", "productCreateTime");
        nsiliToDdfMap.put("NSIL_FILE.extent", Metacard.RESOURCE_SIZE);
        nsiliToDdfMap.put("NSIL_FILE.format", Metacard.CONTENT_TYPE);
        nsiliToDdfMap.put("NSIL_FILE.formatVersion", Metacard.CONTENT_TYPE_VERSION);
        nsiliToDdfMap.put("NSIL_FILE.productURL", Metacard.RESOURCE_DOWNLOAD_URL);
        nsiliToDdfMap.put("NSIL_FILE.title", Metacard.TITLE);
        nsiliToDdfMap.put("NSIL_GMTI.identifierJob", "jobId");
        nsiliToDdfMap.put("NSIL_GMTI.numberOfTargetReports", "numTargetReports");
        nsiliToDdfMap.put("NSIL_IMAGERY.category", "imageryCategory");
        nsiliToDdfMap.put("NSIL_IMAGERY.cloudCoverPercentage", "cloudCoverPct");
        nsiliToDdfMap.put("NSIL_IMAGERY.comments", "imageryComments");
        nsiliToDdfMap.put("NSIL_IMAGERY.decompressionTechnique", "decompressionTechnique");
        nsiliToDdfMap.put("NSIL_IMAGERY.identifier", "imageId");
        nsiliToDdfMap.put("NSIL_IMAGERY.NIIRS", "niirs");
        nsiliToDdfMap.put("NSIL_IMAGERY.numberOfBands", "numBands");
        nsiliToDdfMap.put("NSIL_IMAGERY.numberOfRows", "numRows");
        nsiliToDdfMap.put("NSIL_IMAGERY.numberOfColumns", "numCols");
        nsiliToDdfMap.put("NSIL_IMAGERY.title", Metacard.TITLE);
        nsiliToDdfMap.put("NSIL_MESSAGE.recipient", "recipient");
        nsiliToDdfMap.put("NSIL_MESSAGE.messageBody", Metacard.DESCRIPTION);
        nsiliToDdfMap.put("NSIL_MESSAGE.messageType", "messageType");
        nsiliToDdfMap.put("NSIL_MESSAGE.subject", Metacard.TITLE);
        nsiliToDdfMap.put("NSIL_METADATASECURITY.classification", "securityClassification");
        nsiliToDdfMap.put("NSIL_SECURITY.classification", "securityClassification");
        nsiliToDdfMap.put("NSIL_METADATASECURITY.policy", "securityPolicy");
        nsiliToDdfMap.put("NSIL_SECURITY.policy", "securityPolicy");
        nsiliToDdfMap.put("NSIL_METADATASECURITY.releasability", "securityReleasability");
        nsiliToDdfMap.put("NSIL_SECURITY.releasability", "securityReleasability");
        nsiliToDdfMap.put("NSIL_REPORT.originatorsRequestSerialNumber", "originatorsRequestSerialNumber");
        nsiliToDdfMap.put("NSIL_REPORT.priority", "reportPriority");
        nsiliToDdfMap.put("NSIL_REPORT.type", "reportType");
        nsiliToDdfMap.put("NSIL_RFI.forAction", "forAction");
        nsiliToDdfMap.put("NSIL_RFI.forInformation", "forInformation");
        nsiliToDdfMap.put("NSIL_RFI.serialNumber", "serialNumber");
        nsiliToDdfMap.put("NSIL_RFI.status", "status");
        nsiliToDdfMap.put("NSIL_RFI.workflowStatus", "workflowStatus");
        nsiliToDdfMap.put("NSIL_SDS.operationalStatus", "sdsOperationalStatus");
        nsiliToDdfMap.put("NSIL_STREAM.archived", "archived");
        nsiliToDdfMap.put("NSIL_STREAM.archivalInformation", "archivalInfo");
        nsiliToDdfMap.put("NSIL_STREAM.creator", "creator");
        nsiliToDdfMap.put("NSIL_STREAM.dateTimeDeclared", "dateTimeDeclared");
        nsiliToDdfMap.put("NSIL_STREAM.programID", "programId");
        nsiliToDdfMap.put("NSIL_STREAM.standard", Metacard.CONTENT_TYPE);
        nsiliToDdfMap.put("NSIL_STREAM.standardVersion", Metacard.CONTENT_TYPE_VERSION);
        nsiliToDdfMap.put("NSIL_STREAM.sourceURL", Metacard.RESOURCE_DOWNLOAD_URL);
        nsiliToDdfMap.put("NSIL_TASK.comments", "comments");
        nsiliToDdfMap.put("NSIL_TASK.status", "status");
        nsiliToDdfMap.put("NSIL_TDL.activity", "activity");
        nsiliToDdfMap.put("NSIL_TDL.messageNumber", "messageNumber");
        nsiliToDdfMap.put("NSIL_TDL.platform", "platform");
        nsiliToDdfMap.put("NSIL_TDL.trackNumber", "trackNumber");
        nsiliToDdfMap.put("NSIL_VIDEO.averageBitRate", "averageBitRate");
        nsiliToDdfMap.put("NSIL_VIDEO.category", "category");
        nsiliToDdfMap.put("NSIL_VIDEO.encodingScheme", "encodingScheme");
        nsiliToDdfMap.put("NSIL_VIDEO.frameRate", "frameRate");
        nsiliToDdfMap.put("NSIL_VIDEO.numberOfRows", "numRows");
        nsiliToDdfMap.put("NSIL_VIDEO.numberOfColumns", "numCols");
        nsiliToDdfMap.put("NSIL_VIDEO.metadataEncodingScheme", "metadataEncodingScheme");
        nsiliToDdfMap.put("NSIL_VIDEO.MISMLevel", "mismLevel");
        nsiliToDdfMap.put("NSIL_VIDEO.scanningMode", "scanningMode");

        for (Map.Entry<String, String> nsiliFieldEntry : nsiliToDdfMap.entrySet()) {
            List<String> nsiliList = ddfToNsiliMap.get(nsiliFieldEntry.getValue());
            if (nsiliList == null) {
                nsiliList = new ArrayList<>(2);
                ddfToNsiliMap.put(nsiliFieldEntry.getValue(), nsiliList);
            }
            nsiliList.add(nsiliFieldEntry.getKey());
        }
    }

    public static String getDdfAttributeForNsili(String nsiliAttribute) {
        return nsiliToDdfMap.get(nsiliAttribute);
    }

    public static List<String> getNsiliAttributeForDdf(String ddfAttribute) {
        return ddfToNsiliMap.get(ddfAttribute);
    }
}
